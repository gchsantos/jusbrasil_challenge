version: '3'

services:

  api:
    build:
      context: .
    image: jusbrasil_challenge
    command: './start-server.sh'
    env_file:
      - .env
    environment:
      DJANGO_SETTINGS_MODULE: jusbrasil_challenge.settings.production
      MODE: PROD
    ports:
      - 8000:8000
    networks:
      - back-tier
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  postgres:
    image: postgres:alpine
    restart: always
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U gchsantos -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    networks:
      - back-tier

  rabbitmq:
    image: 'rabbitmq:3-management'
    volumes:
      - "rabbitmq-data:/var/lib/rabbitmq"
    env_file:
      - .env
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - back-tier
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  celery_worker_al:
    build:
      context: .
    image: jusbrasil_challenge
    command: 'celery -A jusbrasil_challenge worker -Q batch_al -l INFO'
    env_file:
      - .env
    environment:
      DJANGO_SETTINGS_MODULE: jusbrasil_challenge.settings.production
      MODE: PROD
    networks:
      - back-tier
    depends_on:
      - rabbitmq
      - postgres

  celery_worker_ce:
    build:
      context: .
    image: jusbrasil_challenge
    command: 'celery -A jusbrasil_challenge worker -Q batch_ce -l INFO'
    env_file:
      - .env
    environment:
      DJANGO_SETTINGS_MODULE: jusbrasil_challenge.settings.production
      MODE: PROD
    networks:
      - back-tier
    depends_on:
      - rabbitmq
      - postgres

volumes:
  postgres-data:
  rabbitmq-data:
  uwsgi_data:
  web_static:


networks:
  back-tier:
